//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using GraphQL.Types;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// Site GraphQL Type
    /// </summary>
    public partial class Site : ModelGraphType<Rock.Model.Site>
    {
       public Site(): base("Site")
       {
          Field("AllowedFrameDomains", x => x.AllowedFrameDomains, nullable: false);
          Field("AllowIndexing", x => x.AllowIndexing, nullable: false);
          Field("AllowsInteractiveBulkIndexing", x => x.AllowsInteractiveBulkIndexing, nullable: false);
          Field<Rock.GraphQL.Types.Page>("ChangePasswordPage", resolve: x => x.Source.ChangePasswordPage);
          Field("ChangePasswordPageId", x => x.ChangePasswordPageId, nullable: true);
          Field<Rock.GraphQL.Types.PageRoute>("ChangePasswordPageRoute", resolve: x => x.Source.ChangePasswordPageRoute);
          Field("ChangePasswordPageRouteId", x => x.ChangePasswordPageRouteId, nullable: true);
          Field<Rock.GraphQL.Types.Page>("CommunicationPage", resolve: x => x.Source.CommunicationPage);
          Field("CommunicationPageId", x => x.CommunicationPageId, nullable: true);
          Field<Rock.GraphQL.Types.PageRoute>("CommunicationPageRoute", resolve: x => x.Source.CommunicationPageRoute);
          Field("CommunicationPageRouteId", x => x.CommunicationPageRouteId, nullable: true);
          Field("ContextKey", x => x.ContextKey, nullable: false);
          Field<Rock.GraphQL.Types.PersonAlias>("CreatedByPersonAlias", resolve: x => x.Source.CreatedByPersonAlias);
          Field("CreatedByPersonId", x => x.CreatedByPersonId, nullable: true);
          Field("CreatedByPersonName", x => x.CreatedByPersonName, nullable: false);
          Field<Rock.GraphQL.Types.Page>("DefaultPage", resolve: x => x.Source.DefaultPage);
          Field("DefaultPageId", x => x.DefaultPageId, nullable: true);
          Field<Rock.GraphQL.Types.PageRoute>("DefaultPageRoute", resolve: x => x.Source.DefaultPageRoute);
          Field("DefaultPageRouteId", x => x.DefaultPageRouteId, nullable: true);
          Field("Description", x => x.Description, nullable: false);
          Field("EnableMobileRedirect", x => x.EnableMobileRedirect, nullable: false);
          Field("EnablePageViews", x => x.EnablePageViews, nullable: false);
          Field("EncryptedKey", x => x.EncryptedKey, nullable: false);
          Field("ErrorPage", x => x.ErrorPage, nullable: false);
          Field("ExternalUrl", x => x.ExternalUrl, nullable: false);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("GoogleAnalyticsCode", x => x.GoogleAnalyticsCode, nullable: false);
          Field("IndexStartingLocation", x => x.IndexStartingLocation, nullable: false);
          Field("IsIndexEnabled", x => x.IsIndexEnabled, nullable: false);
          Field("IsSystem", x => x.IsSystem, nullable: false);
          Field("IsValid", x => x.IsValid, nullable: false);
          Field<ListGraphType<Rock.GraphQL.Types.Layout>>("Layouts", resolve: x => x.Source.Layouts);
          Field<Rock.GraphQL.Types.Page>("LoginPage", resolve: x => x.Source.LoginPage);
          Field("LoginPageId", x => x.LoginPageId, nullable: true);
          Field<Rock.GraphQL.Types.PageRoute>("LoginPageRoute", resolve: x => x.Source.LoginPageRoute);
          Field("LoginPageRouteId", x => x.LoginPageRouteId, nullable: true);
          Field<Rock.GraphQL.Types.Page>("MobilePage", resolve: x => x.Source.MobilePage);
          Field("MobilePageId", x => x.MobilePageId, nullable: true);
          Field("ModifiedAuditValuesAlreadyUpdated", x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field<Rock.GraphQL.Types.PersonAlias>("ModifiedByPersonAlias", resolve: x => x.Source.ModifiedByPersonAlias);
          Field("ModifiedByPersonId", x => x.ModifiedByPersonId, nullable: true);
          Field("ModifiedByPersonName", x => x.ModifiedByPersonName, nullable: false);
          Field("Name", x => x.Name, nullable: false);
          Field("PageHeaderContent", x => x.PageHeaderContent, nullable: false);
          Field<Rock.GraphQL.Types.Page>("PageNotFoundPage", resolve: x => x.Source.PageNotFoundPage);
          Field("PageNotFoundPageId", x => x.PageNotFoundPageId, nullable: true);
          Field<Rock.GraphQL.Types.PageRoute>("PageNotFoundPageRoute", resolve: x => x.Source.PageNotFoundPageRoute);
          Field("PageNotFoundPageRouteId", x => x.PageNotFoundPageRouteId, nullable: true);
          Field("RedirectTablets", x => x.RedirectTablets, nullable: false);
          Field<Rock.GraphQL.Types.Page>("RegistrationPage", resolve: x => x.Source.RegistrationPage);
          Field("RegistrationPageId", x => x.RegistrationPageId, nullable: true);
          Field<Rock.GraphQL.Types.PageRoute>("RegistrationPageRoute", resolve: x => x.Source.RegistrationPageRoute);
          Field("RegistrationPageRouteId", x => x.RegistrationPageRouteId, nullable: true);
          Field("RequiresEncryption", x => x.RequiresEncryption, nullable: false);
          Field<ListGraphType<Rock.GraphQL.Types.SiteDomain>>("SiteDomains", resolve: x => x.Source.SiteDomains);
          Field("Theme", x => x.Theme, nullable: false);
          Field("TypeId", x => x.TypeId, nullable: false);
          Field("TypeName", x => x.TypeName, nullable: false);
          Field("UrlEncodedKey", x => x.UrlEncodedKey, nullable: false);
          Field("CreatedDateTime", x => x.CreatedDateTime, nullable: true);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("CreatedByPersonAliasId", x => x.CreatedByPersonAliasId, nullable: true);
          Field("ModifiedByPersonAliasId", x => x.ModifiedByPersonAliasId, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.Site GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.SiteService(context.db);
           return service.Get(id);
       }
   }
}
