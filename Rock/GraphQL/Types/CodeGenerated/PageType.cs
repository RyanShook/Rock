//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// Page GraphQL Type
    /// </summary>
    public partial class Page : ModelGraphType<Rock.Model.Page>
    {
       public Page(): base("Page")
       {
          Field("AllowIndexing", x => x.AllowIndexing, nullable: false);
          Field("BodyCssClass", x => x.BodyCssClass, nullable: false);
          Field("BreadCrumbDisplayIcon", x => x.BreadCrumbDisplayIcon, nullable: false);
          Field("BreadCrumbDisplayName", x => x.BreadCrumbDisplayName, nullable: false);
          Field("BrowserTitle", x => x.BrowserTitle, nullable: false);
          Field("Description", x => x.Description, nullable: false);
          Field("DisplayInNavWhen", x => x.DisplayInNavWhen.ConvertToInt(), nullable: false);
          Field("EnableViewState", x => x.EnableViewState, nullable: false);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("HeaderContent", x => x.HeaderContent, nullable: false);
          Field("IconCssClass", x => x.IconCssClass, nullable: false);
          Field("IncludeAdminFooter", x => x.IncludeAdminFooter, nullable: false);
          Field("InternalName", x => x.InternalName, nullable: false);
          Field("IsSystem", x => x.IsSystem, nullable: false);
          Field("KeyWords", x => x.KeyWords, nullable: false);
          Field("LayoutId", x => x.LayoutId, nullable: false);
          Field("MenuDisplayChildPages", x => x.MenuDisplayChildPages, nullable: false);
          Field("MenuDisplayDescription", x => x.MenuDisplayDescription, nullable: false);
          Field("MenuDisplayIcon", x => x.MenuDisplayIcon, nullable: false);
          Field("ModifiedAuditValuesAlreadyUpdated", x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field("Order", x => x.Order, nullable: false);
          Field("OutputCacheDuration", x => x.OutputCacheDuration, nullable: false);
          Field("PageDisplayBreadCrumb", x => x.PageDisplayBreadCrumb, nullable: false);
          Field("PageDisplayDescription", x => x.PageDisplayDescription, nullable: false);
          Field("PageDisplayIcon", x => x.PageDisplayIcon, nullable: false);
          Field("PageDisplayTitle", x => x.PageDisplayTitle, nullable: false);
          Field("PageTitle", x => x.PageTitle, nullable: false);
          Field("ParentPageId", x => x.ParentPageId, nullable: true);
          Field("RequiresEncryption", x => x.RequiresEncryption, nullable: false);
          Field("CreatedDateTime", x => x.CreatedDateTime, nullable: true);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("CreatedByPersonAliasId", x => x.CreatedByPersonAliasId, nullable: true);
          Field("ModifiedByPersonAliasId", x => x.ModifiedByPersonAliasId, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.Page GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.PageService(context.db);
           return service.Get(id);
       }
   }
}
