//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using GraphQL.Types;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// Schedule GraphQL Type
    /// </summary>
    public partial class Schedule : ModelGraphType<Rock.Model.Schedule>
    {
       public Schedule(): base("Schedule")
       {
          Field<Rock.GraphQL.Types.Category>("Category", resolve: x => x.Source.Category);
          Field("CategoryId", x => x.CategoryId, nullable: true);
          Field("CheckInEndOffsetMinutes", x => x.CheckInEndOffsetMinutes, nullable: true);
          Field("CheckInStartOffsetMinutes", x => x.CheckInStartOffsetMinutes, nullable: true);
          Field("ContextKey", x => x.ContextKey, nullable: false);
          Field<Rock.GraphQL.Types.PersonAlias>("CreatedByPersonAlias", resolve: x => x.Source.CreatedByPersonAlias);
          Field("CreatedByPersonId", x => x.CreatedByPersonId, nullable: true);
          Field("CreatedByPersonName", x => x.CreatedByPersonName, nullable: false);
          Field("Description", x => x.Description, nullable: false);
          Field("EffectiveEndDate", x => x.EffectiveEndDate, nullable: true);
          Field("EffectiveStartDate", x => x.EffectiveStartDate, nullable: true);
          Field("EncryptedKey", x => x.EncryptedKey, nullable: false);
          Field("FirstStartDateTimeThisWeek", x => x.FirstStartDateTimeThisWeek, nullable: true);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("FriendlyScheduleText", x => x.FriendlyScheduleText, nullable: false);
          Field("iCalendarContent", x => x.iCalendarContent, nullable: false);
          Field("IsCheckInActive", x => x.IsCheckInActive, nullable: false);
          Field("IsCheckInEnabled", x => x.IsCheckInEnabled, nullable: false);
          Field("IsScheduleActive", x => x.IsScheduleActive, nullable: false);
          Field("IsScheduleOrCheckInActive", x => x.IsScheduleOrCheckInActive, nullable: false);
          Field("IsValid", x => x.IsValid, nullable: false);
          Field("ModifiedAuditValuesAlreadyUpdated", x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field<Rock.GraphQL.Types.PersonAlias>("ModifiedByPersonAlias", resolve: x => x.Source.ModifiedByPersonAlias);
          Field("ModifiedByPersonId", x => x.ModifiedByPersonId, nullable: true);
          Field("ModifiedByPersonName", x => x.ModifiedByPersonName, nullable: false);
          Field("Name", x => x.Name, nullable: false);
          Field("NextStartDateTime", x => x.NextStartDateTime, nullable: true);
          Field("ScheduleType", x => x.ScheduleType.ConvertToInt(), nullable: false);
          Field("TypeId", x => x.TypeId, nullable: false);
          Field("TypeName", x => x.TypeName, nullable: false);
          Field("UrlEncodedKey", x => x.UrlEncodedKey, nullable: false);
          Field("CreatedDateTime", x => x.CreatedDateTime, nullable: true);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("CreatedByPersonAliasId", x => x.CreatedByPersonAliasId, nullable: true);
          Field("ModifiedByPersonAliasId", x => x.ModifiedByPersonAliasId, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.Schedule GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.ScheduleService(context.db);
           return service.Get(id);
       }
   }
}
