//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// Person GraphQL Type
    /// </summary>
    public partial class Person : ModelGraphType<Rock.Model.Person>
    {
       public Person(): base("Person")
       {
          Field("AnniversaryDate", x => x.AnniversaryDate, nullable: true);
          Field("BirthDate", x => x.BirthDate, nullable: true);
          Field("BirthDay", x => x.BirthDay, nullable: true);
          Field("BirthMonth", x => x.BirthMonth, nullable: true);
          Field("BirthYear", x => x.BirthYear, nullable: true);
          Field<Rock.GraphQL.Types.DefinedValue>("ConnectionStatusValue", resolve: x => x.Source.ConnectionStatusValue);
          Field("ConnectionStatusValueId", x => x.ConnectionStatusValueId, nullable: true);
          Field("DaysUntilBirthday", x => x.DaysUntilBirthday, nullable: true);
          Field("Email", x => x.Email, nullable: false);
          Field("EmailNote", x => x.EmailNote, nullable: false);
          Field("EmailPreference", x => x.EmailPreference.ConvertToInt(), nullable: false);
          Field("FirstName", x => x.FirstName, nullable: false);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("Gender", x => x.Gender.ConvertToInt(), nullable: false);
          Field("GivingGroupId", x => x.GivingGroupId, nullable: true);
          Field("GivingId", x => x.GivingId, nullable: false);
          Field("GivingLeaderId", x => x.GivingLeaderId, nullable: false);
          Field("GradeOffset", x => x.GradeOffset, nullable: true);
          Field("GraduationYear", x => x.GraduationYear, nullable: true);
          Field("InactiveReasonNote", x => x.InactiveReasonNote, nullable: false);
          Field("IsDeceased", x => x.IsDeceased, nullable: false);
          Field("IsEmailActive", x => x.IsEmailActive, nullable: false);
          Field("IsSystem", x => x.IsSystem, nullable: false);
          Field("LastName", x => x.LastName, nullable: false);
          Field<Rock.GraphQL.Types.DefinedValue>("MaritalStatusValue", resolve: x => x.Source.MaritalStatusValue);
          Field("MaritalStatusValueId", x => x.MaritalStatusValueId, nullable: true);
          Field("MiddleName", x => x.MiddleName, nullable: false);
          Field("ModifiedAuditValuesAlreadyUpdated", x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field("NickName", x => x.NickName, nullable: false);
          Field<Rock.GraphQL.Types.BinaryFile>("Photo", resolve: x => x.Source.Photo);
          Field("PhotoId", x => x.PhotoId, nullable: true);
          Field("PrimaryAliasId", x => x.PrimaryAliasId, nullable: true);
          Field("RecordStatusLastModifiedDateTime", x => x.RecordStatusLastModifiedDateTime, nullable: true);
          Field<Rock.GraphQL.Types.DefinedValue>("RecordStatusReasonValue", resolve: x => x.Source.RecordStatusReasonValue);
          Field("RecordStatusReasonValueId", x => x.RecordStatusReasonValueId, nullable: true);
          Field<Rock.GraphQL.Types.DefinedValue>("RecordStatusValue", resolve: x => x.Source.RecordStatusValue);
          Field("RecordStatusValueId", x => x.RecordStatusValueId, nullable: true);
          Field<Rock.GraphQL.Types.DefinedValue>("RecordTypeValue", resolve: x => x.Source.RecordTypeValue);
          Field("RecordTypeValueId", x => x.RecordTypeValueId, nullable: true);
          Field("ReviewReasonNote", x => x.ReviewReasonNote, nullable: false);
          Field<Rock.GraphQL.Types.DefinedValue>("ReviewReasonValue", resolve: x => x.Source.ReviewReasonValue);
          Field("ReviewReasonValueId", x => x.ReviewReasonValueId, nullable: true);
          Field<Rock.GraphQL.Types.DefinedValue>("SuffixValue", resolve: x => x.Source.SuffixValue);
          Field("SuffixValueId", x => x.SuffixValueId, nullable: true);
          Field("SystemNote", x => x.SystemNote, nullable: false);
          Field<Rock.GraphQL.Types.DefinedValue>("TitleValue", resolve: x => x.Source.TitleValue);
          Field("TitleValueId", x => x.TitleValueId, nullable: true);
          Field("ViewedCount", x => x.ViewedCount, nullable: true);
          Field("CreatedDateTime", x => x.CreatedDateTime, nullable: true);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("CreatedByPersonAliasId", x => x.CreatedByPersonAliasId, nullable: true);
          Field("ModifiedByPersonAliasId", x => x.ModifiedByPersonAliasId, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.Person GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.PersonService(context.db);
           return service.Get(id);
       }
   }
}
