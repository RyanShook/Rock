//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// Attendance GraphQL Type
    /// </summary>
    public partial class Attendance : ModelGraphType<Rock.Model.Attendance>
    {
       public Attendance(): base("Attendance")
       {
          Field<Rock.GraphQL.Types.AttendanceCode>("AttendanceCode", resolve: x => x.Source.AttendanceCode);
          Field("AttendanceCodeId", x => x.AttendanceCodeId, nullable: true);
          Field("CampusId", x => x.CampusId, nullable: true);
          Field<Rock.GraphQL.Types.Device>("Device", resolve: x => x.Source.Device);
          Field("DeviceId", x => x.DeviceId, nullable: true);
          Field("DidAttend", x => x.DidAttend, nullable: true);
          Field("DidNotOccur", x => x.DidNotOccur, nullable: true);
          Field("EndDateTime", x => x.EndDateTime, nullable: true);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("GroupId", x => x.GroupId, nullable: true);
          Field("LocationId", x => x.LocationId, nullable: true);
          Field("ModifiedAuditValuesAlreadyUpdated", x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field("Note", x => x.Note, nullable: false);
          Field("PersonAliasId", x => x.PersonAliasId, nullable: true);
          Field("Processed", x => x.Processed, nullable: true);
          Field<Rock.GraphQL.Types.DefinedValue>("Qualifier", resolve: x => x.Source.Qualifier);
          Field("QualifierValueId", x => x.QualifierValueId, nullable: true);
          Field("RSVP", x => x.RSVP.ConvertToInt(), nullable: false);
          Field("ScheduleId", x => x.ScheduleId, nullable: true);
          Field("SearchResultGroupId", x => x.SearchResultGroupId, nullable: true);
          Field<Rock.GraphQL.Types.DefinedValue>("SearchTypeValue", resolve: x => x.Source.SearchTypeValue);
          Field("SearchTypeValueId", x => x.SearchTypeValueId, nullable: true);
          Field("SearchValue", x => x.SearchValue, nullable: false);
          Field("StartDateTime", x => x.StartDateTime, nullable: false);
          Field("SundayDate", x => x.SundayDate, nullable: false);
          Field("CreatedDateTime", x => x.CreatedDateTime, nullable: true);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("CreatedByPersonAliasId", x => x.CreatedByPersonAliasId, nullable: true);
          Field("ModifiedByPersonAliasId", x => x.ModifiedByPersonAliasId, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.Attendance GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.AttendanceService(context.db);
           return service.Get(id);
       }
   }
}
