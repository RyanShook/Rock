//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// RegistrationTemplate GraphQL Type
    /// </summary>
    public partial class RegistrationTemplate : ModelGraphType<Rock.Model.RegistrationTemplate>
    {
       public RegistrationTemplate(): base("RegistrationTemplate")
       {
          Field("AddPersonNote", x => x.AddPersonNote, nullable: false);
          Field("AllowExternalRegistrationUpdates", x => x.AllowExternalRegistrationUpdates, nullable: false);
          Field("AllowGroupPlacement", x => x.AllowGroupPlacement, nullable: false);
          Field("AllowMultipleRegistrants", x => x.AllowMultipleRegistrants, nullable: false);
          Field("BatchNamePrefix", x => x.BatchNamePrefix, nullable: false);
          Field("CategoryId", x => x.CategoryId, nullable: true);
          Field("ConfirmationEmailTemplate", x => x.ConfirmationEmailTemplate, nullable: false);
          Field("ConfirmationFromEmail", x => x.ConfirmationFromEmail, nullable: false);
          Field("ConfirmationFromName", x => x.ConfirmationFromName, nullable: false);
          Field("ConfirmationSubject", x => x.ConfirmationSubject, nullable: false);
          Field("Cost", x => x.Cost, nullable: false);
          Field("DiscountCodeTerm", x => x.DiscountCodeTerm, nullable: false);
          Field("FeeTerm", x => x.FeeTerm, nullable: false);
          Field<Rock.GraphQL.Types.FinancialGateway>("FinancialGateway", resolve: x => x.Source.FinancialGateway);
          Field("FinancialGatewayId", x => x.FinancialGatewayId, nullable: true);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("GroupMemberRoleId", x => x.GroupMemberRoleId, nullable: true);
          Field("GroupMemberStatus", x => x.GroupMemberStatus.ConvertToInt(), nullable: false);
          Field("GroupTypeId", x => x.GroupTypeId, nullable: true);
          Field("IsActive", x => x.IsActive, nullable: false);
          Field("LoginRequired", x => x.LoginRequired, nullable: false);
          Field("MaxRegistrants", x => x.MaxRegistrants, nullable: false);
          Field("MinimumInitialPayment", x => x.MinimumInitialPayment, nullable: true);
          Field("ModifiedAuditValuesAlreadyUpdated", x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field("Name", x => x.Name, nullable: false);
          Field("Notify", x => x.Notify.ConvertToInt(), nullable: false);
          Field("PaymentReminderEmailTemplate", x => x.PaymentReminderEmailTemplate, nullable: false);
          Field("PaymentReminderFromEmail", x => x.PaymentReminderFromEmail, nullable: false);
          Field("PaymentReminderFromName", x => x.PaymentReminderFromName, nullable: false);
          Field("PaymentReminderSubject", x => x.PaymentReminderSubject, nullable: false);
          Field("PaymentReminderTimeSpan", x => x.PaymentReminderTimeSpan, nullable: true);
          Field("RegistrantsSameFamily", x => x.RegistrantsSameFamily.ConvertToInt(), nullable: false);
          Field("RegistrantTerm", x => x.RegistrantTerm, nullable: false);
          Field("RegistrationTerm", x => x.RegistrationTerm, nullable: false);
          Field<Rock.GraphQL.Types.WorkflowType>("RegistrationWorkflowType", resolve: x => x.Source.RegistrationWorkflowType);
          Field("RegistrationWorkflowTypeId", x => x.RegistrationWorkflowTypeId, nullable: true);
          Field("ReminderEmailTemplate", x => x.ReminderEmailTemplate, nullable: false);
          Field("ReminderFromEmail", x => x.ReminderFromEmail, nullable: false);
          Field("ReminderFromName", x => x.ReminderFromName, nullable: false);
          Field("ReminderSubject", x => x.ReminderSubject, nullable: false);
          Field("RequestEntryName", x => x.RequestEntryName, nullable: false);
          Field<Rock.GraphQL.Types.SignatureDocumentTemplate>("RequiredSignatureDocumentTemplate", resolve: x => x.Source.RequiredSignatureDocumentTemplate);
          Field("RequiredSignatureDocumentTemplateId", x => x.RequiredSignatureDocumentTemplateId, nullable: true);
          Field("SetCostOnInstance", x => x.SetCostOnInstance, nullable: true);
          Field("ShowCurrentFamilyMembers", x => x.ShowCurrentFamilyMembers, nullable: false);
          Field("SignatureDocumentAction", x => x.SignatureDocumentAction.ConvertToInt(), nullable: false);
          Field("SuccessText", x => x.SuccessText, nullable: false);
          Field("SuccessTitle", x => x.SuccessTitle, nullable: false);
          Field("WaitListEnabled", x => x.WaitListEnabled, nullable: false);
          Field("WaitListTransitionEmailTemplate", x => x.WaitListTransitionEmailTemplate, nullable: false);
          Field("WaitListTransitionFromEmail", x => x.WaitListTransitionFromEmail, nullable: false);
          Field("WaitListTransitionFromName", x => x.WaitListTransitionFromName, nullable: false);
          Field("WaitListTransitionSubject", x => x.WaitListTransitionSubject, nullable: false);
          Field("CreatedDateTime", x => x.CreatedDateTime, nullable: true);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("CreatedByPersonAliasId", x => x.CreatedByPersonAliasId, nullable: true);
          Field("ModifiedByPersonAliasId", x => x.ModifiedByPersonAliasId, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.RegistrationTemplate GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.RegistrationTemplateService(context.db);
           return service.Get(id);
       }
   }
}
