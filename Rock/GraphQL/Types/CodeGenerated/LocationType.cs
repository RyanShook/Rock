//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// Location GraphQL Type
    /// </summary>
    public partial class Location : ModelGraphType<Rock.Model.Location>
    {
       public Location(): base("Location")
       {
          Field("AssessorParcelId", x => x.AssessorParcelId, nullable: false);
          Field("Barcode", x => x.Barcode, nullable: false);
          Field("City", x => x.City, nullable: false);
          Field("Country", x => x.Country, nullable: false);
          Field("County", x => x.County, nullable: false);
          Field("Distance", x => x.Distance, nullable: false);
          Field("FirmRoomThreshold", x => x.FirmRoomThreshold, nullable: true);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("GeocodeAttemptedDateTime", x => x.GeocodeAttemptedDateTime, nullable: true);
          Field("GeocodeAttemptedResult", x => x.GeocodeAttemptedResult, nullable: false);
          Field("GeocodeAttemptedServiceType", x => x.GeocodeAttemptedServiceType, nullable: false);
          Field("GeocodedDateTime", x => x.GeocodedDateTime, nullable: true);
          Field<Rock.GraphQL.Types.BinaryFile>("Image", resolve: x => x.Source.Image);
          Field("ImageId", x => x.ImageId, nullable: true);
          Field("IsActive", x => x.IsActive, nullable: false);
          Field("IsGeoPointLocked", x => x.IsGeoPointLocked, nullable: true);
          Field("Latitude", x => x.Latitude, nullable: true);
          Field<Rock.GraphQL.Types.DefinedValue>("LocationTypeValue", resolve: x => x.Source.LocationTypeValue);
          Field("LocationTypeValueId", x => x.LocationTypeValueId, nullable: true);
          Field("Longitude", x => x.Longitude, nullable: true);
          Field("ModifiedAuditValuesAlreadyUpdated", x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field("Name", x => x.Name, nullable: false);
          Field("ParentLocationId", x => x.ParentLocationId, nullable: true);
          Field("PostalCode", x => x.PostalCode, nullable: false);
          Field<Rock.GraphQL.Types.Device>("PrinterDevice", resolve: x => x.Source.PrinterDevice);
          Field("PrinterDeviceId", x => x.PrinterDeviceId, nullable: true);
          Field("SoftRoomThreshold", x => x.SoftRoomThreshold, nullable: true);
          Field("StandardizeAttemptedDateTime", x => x.StandardizeAttemptedDateTime, nullable: true);
          Field("StandardizeAttemptedResult", x => x.StandardizeAttemptedResult, nullable: false);
          Field("StandardizeAttemptedServiceType", x => x.StandardizeAttemptedServiceType, nullable: false);
          Field("StandardizedDateTime", x => x.StandardizedDateTime, nullable: true);
          Field("State", x => x.State, nullable: false);
          Field("Street1", x => x.Street1, nullable: false);
          Field("Street2", x => x.Street2, nullable: false);
          Field("CreatedDateTime", x => x.CreatedDateTime, nullable: true);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("CreatedByPersonAliasId", x => x.CreatedByPersonAliasId, nullable: true);
          Field("ModifiedByPersonAliasId", x => x.ModifiedByPersonAliasId, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.Location GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.LocationService(context.db);
           return service.Get(id);
       }
   }
}
