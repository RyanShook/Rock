//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using GraphQL.Types;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// Group GraphQL Type
    /// </summary>
    public partial class Group : ModelGraphType<Rock.Model.Group>
    {
       public Group(): base("Group")
       {
          Field("AddUserAccountsDuringSync", x => x.AddUserAccountsDuringSync, nullable: true);
          Field("AllowGuests", x => x.AllowGuests, nullable: true);
          Field("AllowsInteractiveBulkIndexing", x => x.AllowsInteractiveBulkIndexing, nullable: false);
          Field<Rock.GraphQL.Types.Campus>("Campus", resolve: x => x.Source.Campus);
          Field("CampusId", x => x.CampusId, nullable: true);
          Field("ContextKey", x => x.ContextKey, nullable: false);
          Field<Rock.GraphQL.Types.PersonAlias>("CreatedByPersonAlias", resolve: x => x.Source.CreatedByPersonAlias);
          Field("CreatedByPersonId", x => x.CreatedByPersonId, nullable: true);
          Field("CreatedByPersonName", x => x.CreatedByPersonName, nullable: false);
          Field("Description", x => x.Description, nullable: false);
          Field("EncryptedKey", x => x.EncryptedKey, nullable: false);
          Field<Rock.GraphQL.Types.SystemEmail>("ExitSystemEmail", resolve: x => x.Source.ExitSystemEmail);
          Field("ExitSystemEmailId", x => x.ExitSystemEmailId, nullable: true);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("GroupCapacity", x => x.GroupCapacity, nullable: true);
          Field<ListGraphType<Rock.GraphQL.Types.GroupLocation>>("GroupLocations", resolve: x => x.Source.GroupLocations);
          Field<ListGraphType<Rock.GraphQL.Types.GroupMemberWorkflowTrigger>>("GroupMemberWorkflowTriggers", resolve: x => x.Source.GroupMemberWorkflowTriggers);
          Field<ListGraphType<Rock.GraphQL.Types.GroupRequirement>>("GroupRequirements", resolve: x => x.Source.GroupRequirements);
          Field<ListGraphType<Rock.GraphQL.Types.Group>>("Groups", resolve: x => x.Source.Groups);
          Field<Rock.GraphQL.Types.GroupType>("GroupType", resolve: x => x.Source.GroupType);
          Field("GroupTypeId", x => x.GroupTypeId, nullable: false);
          Field("IsActive", x => x.IsActive, nullable: false);
          Field("IsPublic", x => x.IsPublic, nullable: false);
          Field("IsSecurityRole", x => x.IsSecurityRole, nullable: false);
          Field("IsSystem", x => x.IsSystem, nullable: false);
          Field("IsValid", x => x.IsValid, nullable: false);
          Field<ListGraphType<Rock.GraphQL.Types.EventItemOccurrenceGroupMap>>("Linkages", resolve: x => x.Source.Linkages);
          Field<ListGraphType<Rock.GraphQL.Types.GroupMember>>("Members", resolve: x => x.Source.Members);
          Field("ModifiedAuditValuesAlreadyUpdated", x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field<Rock.GraphQL.Types.PersonAlias>("ModifiedByPersonAlias", resolve: x => x.Source.ModifiedByPersonAlias);
          Field("ModifiedByPersonId", x => x.ModifiedByPersonId, nullable: true);
          Field("ModifiedByPersonName", x => x.ModifiedByPersonName, nullable: false);
          Field("MustMeetRequirementsToAddMember", x => x.MustMeetRequirementsToAddMember, nullable: true);
          Field("Name", x => x.Name, nullable: false);
          Field("Order", x => x.Order, nullable: false);
          Field<Rock.GraphQL.Types.Group>("ParentGroup", resolve: x => x.Source.ParentGroup);
          Field("ParentGroupId", x => x.ParentGroupId, nullable: true);
          Field<Rock.GraphQL.Types.SignatureDocumentTemplate>("RequiredSignatureDocumentTemplate", resolve: x => x.Source.RequiredSignatureDocumentTemplate);
          Field("RequiredSignatureDocumentTemplateId", x => x.RequiredSignatureDocumentTemplateId, nullable: true);
          Field<Rock.GraphQL.Types.Schedule>("Schedule", resolve: x => x.Source.Schedule);
          Field("ScheduleId", x => x.ScheduleId, nullable: true);
          Field<Rock.GraphQL.Types.DataView>("SyncDataView", resolve: x => x.Source.SyncDataView);
          Field("SyncDataViewId", x => x.SyncDataViewId, nullable: true);
          Field("TypeId", x => x.TypeId, nullable: false);
          Field("TypeName", x => x.TypeName, nullable: false);
          Field("UrlEncodedKey", x => x.UrlEncodedKey, nullable: false);
          Field<Rock.GraphQL.Types.SystemEmail>("WelcomeSystemEmail", resolve: x => x.Source.WelcomeSystemEmail);
          Field("WelcomeSystemEmailId", x => x.WelcomeSystemEmailId, nullable: true);
          Field("CreatedDateTime", x => x.CreatedDateTime, nullable: true);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("CreatedByPersonAliasId", x => x.CreatedByPersonAliasId, nullable: true);
          Field("ModifiedByPersonAliasId", x => x.ModifiedByPersonAliasId, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.Group GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.GroupService(context.db);
           return service.Get(id);
       }
   }
}
