//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// AnalyticsFactFinancialTransaction GraphQL Type
    /// </summary>
    public partial class AnalyticsFactFinancialTransaction : ModelGraphType<Rock.Model.AnalyticsFactFinancialTransaction>
    {
       public AnalyticsFactFinancialTransaction(): base("AnalyticsFactFinancialTransaction")
       {
          Field<Rock.GraphQL.Types.AnalyticsDimFinancialAccount>("Account", resolve: x => x.Source.Account);
          Field("AccountId", x => x.AccountId, nullable: true);
          Field("Amount", x => x.Amount, nullable: false);
          Field("AuthorizedCurrentPersonKey", x => x.AuthorizedCurrentPersonKey, nullable: true);
          Field("AuthorizedFamilyId", x => x.AuthorizedFamilyId, nullable: true);
          Field("AuthorizedFamilyKey", x => x.AuthorizedFamilyKey, nullable: true);
          Field("AuthorizedPersonAliasId", x => x.AuthorizedPersonAliasId, nullable: true);
          Field("AuthorizedPersonKey", x => x.AuthorizedPersonKey, nullable: true);
          Field<Rock.GraphQL.Types.AnalyticsDimFinancialBatch>("Batch", resolve: x => x.Source.Batch);
          Field("BatchId", x => x.BatchId, nullable: true);
          Field("Count", x => x.Count, nullable: false);
          Field("CreditCardType", x => x.CreditCardType, nullable: false);
          Field("CreditCardTypeValueId", x => x.CreditCardTypeValueId, nullable: true);
          Field("CurrencyType", x => x.CurrencyType, nullable: false);
          Field("CurrencyTypeValueId", x => x.CurrencyTypeValueId, nullable: true);
          Field("DaysSinceLastTransactionOfType", x => x.DaysSinceLastTransactionOfType, nullable: true);
          Field("EntityId", x => x.EntityId, nullable: true);
          Field("EntityTypeId", x => x.EntityTypeId, nullable: true);
          Field("EntityTypeName", x => x.EntityTypeName, nullable: false);
          Field("FinancialGateway", x => x.FinancialGateway, nullable: false);
          Field("FinancialGatewayId", x => x.FinancialGatewayId, nullable: true);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("GivingGroupId", x => x.GivingGroupId, nullable: true);
          Field("GivingId", x => x.GivingId, nullable: false);
          Field("GivingUnitKey", x => x.GivingUnitKey, nullable: true);
          Field("IsFirstTransactionOfType", x => x.IsFirstTransactionOfType, nullable: false);
          Field("IsScheduled", x => x.IsScheduled, nullable: false);
          Field("ProcessedByPersonAliasId", x => x.ProcessedByPersonAliasId, nullable: true);
          Field("ProcessedByPersonKey", x => x.ProcessedByPersonKey, nullable: true);
          Field("ProcessedDateTime", x => x.ProcessedDateTime, nullable: true);
          Field("ScheduleType", x => x.ScheduleType, nullable: false);
          Field("SourceTypeValueId", x => x.SourceTypeValueId, nullable: true);
          Field("Summary", x => x.Summary, nullable: false);
          Field("TransactionCode", x => x.TransactionCode, nullable: false);
          //Field<Rock.GraphQL.Types.AnalyticsDimDate>("TransactionDate", resolve: x => x.Source.TransactionDate);
          Field("TransactionDateKey", x => x.TransactionDateKey, nullable: false);
          Field("TransactionDateTime", x => x.TransactionDateTime, nullable: false);
          Field("TransactionDetailId", x => x.TransactionDetailId, nullable: false);
          Field("TransactionFrequency", x => x.TransactionFrequency, nullable: false);
          Field("TransactionId", x => x.TransactionId, nullable: false);
          Field("TransactionKey", x => x.TransactionKey, nullable: false);
          Field("TransactionSource", x => x.TransactionSource, nullable: false);
          Field("TransactionType", x => x.TransactionType, nullable: false);
          //Field<Rock.GraphQL.Types.AnalyticsDimFinancialTransactionType>("TransactionTypeValue", resolve: x => x.Source.TransactionTypeValue);
          Field("TransactionTypeValueId", x => x.TransactionTypeValueId, nullable: false);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.AnalyticsFactFinancialTransaction GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.AnalyticsFactFinancialTransactionService(context.db);
           return service.Get(id);
       }
   }
}
