//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// AnalyticsDimFamilyHistorical GraphQL Type
    /// </summary>
    public partial class AnalyticsDimFamilyHistorical : ModelGraphType<Rock.Model.AnalyticsDimFamilyHistorical>
    {
       public AnalyticsDimFamilyHistorical(): base("AnalyticsDimFamilyHistorical")
       {
          Field("AdultCount", x => x.AdultCount, nullable: false);
          Field("CampusId", x => x.CampusId, nullable: true);
          Field("CampusName", x => x.CampusName, nullable: false);
          Field("CampusShortCode", x => x.CampusShortCode, nullable: false);
          Field("ChildCount", x => x.ChildCount, nullable: false);
          Field("ConnectionStatus", x => x.ConnectionStatus, nullable: false);
          Field("CurrentRowIndicator", x => x.CurrentRowIndicator, nullable: false);
          Field("EffectiveDate", x => x.EffectiveDate, nullable: false);
          Field("ExpireDate", x => x.ExpireDate, nullable: false);
          Field("FamilyId", x => x.FamilyId, nullable: false);
          Field("FamilyTitle", x => x.FamilyTitle, nullable: false);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("HeadOfHouseholdPersonKey", x => x.HeadOfHouseholdPersonKey, nullable: true);
          Field("IsEra", x => x.IsEra, nullable: false);
          Field("IsFamilyActive", x => x.IsFamilyActive, nullable: false);
          Field("MailingAddressCity", x => x.MailingAddressCity, nullable: false);
          Field("MailingAddressCountry", x => x.MailingAddressCountry, nullable: false);
          Field("MailingAddressCounty", x => x.MailingAddressCounty, nullable: false);
          Field("MailingAddressLatitude", x => x.MailingAddressLatitude, nullable: true);
          Field("MailingAddressLocationId", x => x.MailingAddressLocationId, nullable: true);
          Field("MailingAddressLongitude", x => x.MailingAddressLongitude, nullable: true);
          Field("MailingAddressPostalCode", x => x.MailingAddressPostalCode, nullable: false);
          Field("MailingAddressState", x => x.MailingAddressState, nullable: false);
          Field("MailingAddressStreet1", x => x.MailingAddressStreet1, nullable: false);
          Field("MailingAddressStreet2", x => x.MailingAddressStreet2, nullable: false);
          Field("MappedAddressCity", x => x.MappedAddressCity, nullable: false);
          Field("MappedAddressCountry", x => x.MappedAddressCountry, nullable: false);
          Field("MappedAddressCounty", x => x.MappedAddressCounty, nullable: false);
          Field("MappedAddressLatitude", x => x.MappedAddressLatitude, nullable: true);
          Field("MappedAddressLocationId", x => x.MappedAddressLocationId, nullable: true);
          Field("MappedAddressLongitude", x => x.MappedAddressLongitude, nullable: true);
          Field("MappedAddressPostalCode", x => x.MappedAddressPostalCode, nullable: false);
          Field("MappedAddressState", x => x.MappedAddressState, nullable: false);
          Field("MappedAddressStreet1", x => x.MappedAddressStreet1, nullable: false);
          Field("MappedAddressStreet2", x => x.MappedAddressStreet2, nullable: false);
          Field("Name", x => x.Name, nullable: false);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.AnalyticsDimFamilyHistorical GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.AnalyticsDimFamilyHistoricalService(context.db);
           return service.Get(id);
       }
   }
}
