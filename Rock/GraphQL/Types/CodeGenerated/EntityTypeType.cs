//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using GraphQL.Types;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// EntityType GraphQL Type
    /// </summary>
    public partial class EntityType : ModelGraphType<Rock.Model.EntityType>
    {
       public EntityType(): base("EntityType")
       {
          Field("AssemblyName", x => x.AssemblyName, nullable: false);
          Field("ContextKey", x => x.ContextKey, nullable: false);
          Field("EncryptedKey", x => x.EncryptedKey, nullable: false);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("FriendlyName", x => x.FriendlyName, nullable: false);
          Field("IndexDocumentUrl", x => x.IndexDocumentUrl, nullable: false);
          Field("IndexResultTemplate", x => x.IndexResultTemplate, nullable: false);
          Field("IsAnalyticHistoricalSupported", x => x.IsAnalyticHistoricalSupported, nullable: false);
          Field("IsAnalyticSupported", x => x.IsAnalyticSupported, nullable: false);
          Field("IsCommon", x => x.IsCommon, nullable: false);
          Field("IsEntity", x => x.IsEntity, nullable: false);
          Field("IsIndexingEnabled", x => x.IsIndexingEnabled, nullable: false);
          Field("IsIndexingSupported", x => x.IsIndexingSupported, nullable: false);
          Field("IsSecured", x => x.IsSecured, nullable: false);
          Field("IsSystem", x => x.IsSystem, nullable: false);
          Field("IsValid", x => x.IsValid, nullable: false);
          Field<Rock.GraphQL.Types.FieldType>("MultiValueFieldType", resolve: x => x.Source.MultiValueFieldType);
          Field("MultiValueFieldTypeId", x => x.MultiValueFieldTypeId, nullable: true);
          Field("Name", x => x.Name, nullable: false);
          Field<Rock.GraphQL.Types.FieldType>("SingleValueFieldType", resolve: x => x.Source.SingleValueFieldType);
          Field("SingleValueFieldTypeId", x => x.SingleValueFieldTypeId, nullable: true);
          Field("TypeId", x => x.TypeId, nullable: false);
          Field("TypeName", x => x.TypeName, nullable: false);
          Field("UrlEncodedKey", x => x.UrlEncodedKey, nullable: false);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.EntityType GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.EntityTypeService(context.db);
           return service.Get(id);
       }
   }
}
