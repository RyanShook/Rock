//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// AnalyticsSourceAttendance GraphQL Type
    /// </summary>
    public partial class AnalyticsSourceAttendance : ModelGraphType<Rock.Model.AnalyticsSourceAttendance>
    {
       public AnalyticsSourceAttendance(): base("AnalyticsSourceAttendance")
       {
          //Field<Rock.GraphQL.Types.AnalyticsDimDate>("AttendanceDate", resolve: x => x.Source.AttendanceDate);
          Field("AttendanceDateKey", x => x.AttendanceDateKey, nullable: false);
          Field("AttendanceId", x => x.AttendanceId, nullable: false);
          Field("AttendanceTypeId", x => x.AttendanceTypeId, nullable: true);
          Field("CampusId", x => x.CampusId, nullable: true);
          Field("Count", x => x.Count, nullable: false);
          Field("CurrentPersonKey", x => x.CurrentPersonKey, nullable: true);
          Field("DaysSinceLastAttendanceOfType", x => x.DaysSinceLastAttendanceOfType, nullable: true);
          Field("DeviceId", x => x.DeviceId, nullable: true);
          Field("DidAttend", x => x.DidAttend, nullable: true);
          Field("EndDateTime", x => x.EndDateTime, nullable: true);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("GroupId", x => x.GroupId, nullable: true);
          Field("IsFirstAttendanceOfType", x => x.IsFirstAttendanceOfType, nullable: false);
          //Field<Rock.GraphQL.Types.AnalyticsDimAttendanceLocation>("Location", resolve: x => x.Source.Location);
          Field("LocationId", x => x.LocationId, nullable: true);
          Field("Note", x => x.Note, nullable: false);
          Field("PersonAliasId", x => x.PersonAliasId, nullable: true);
          Field("PersonKey", x => x.PersonKey, nullable: true);
          Field("RSVP", x => x.RSVP.ConvertToInt(), nullable: false);
          Field("ScheduleId", x => x.ScheduleId, nullable: true);
          Field("SearchTypeName", x => x.SearchTypeName, nullable: false);
          Field("StartDateTime", x => x.StartDateTime, nullable: false);
          Field("SundayDate", x => x.SundayDate, nullable: false);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.AnalyticsSourceAttendance GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.AnalyticsSourceAttendanceService(context.db);
           return service.Get(id);
       }
   }
}
