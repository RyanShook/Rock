//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// RegistrationInstance GraphQL Type
    /// </summary>
    public partial class RegistrationInstance : ModelGraphType<Rock.Model.RegistrationInstance>
    {
       public RegistrationInstance(): base("RegistrationInstance")
       {
          Field<Rock.GraphQL.Types.FinancialAccount>("Account", resolve: x => x.Source.Account);
          Field("AccountId", x => x.AccountId, nullable: true);
          Field("AdditionalConfirmationDetails", x => x.AdditionalConfirmationDetails, nullable: false);
          Field("AdditionalReminderDetails", x => x.AdditionalReminderDetails, nullable: false);
          Field("ContactEmail", x => x.ContactEmail, nullable: false);
          Field<Rock.GraphQL.Types.PersonAlias>("ContactPersonAlias", resolve: x => x.Source.ContactPersonAlias);
          Field("ContactPersonAliasId", x => x.ContactPersonAliasId, nullable: true);
          Field("ContactPhone", x => x.ContactPhone, nullable: false);
          Field("Cost", x => x.Cost, nullable: true);
          Field("Details", x => x.Details, nullable: false);
          Field("EndDateTime", x => x.EndDateTime, nullable: true);
          Field("ForeignGuid", x => x.ForeignGuid.ToStringSafe(), nullable: true);
          Field("ForeignKey", x => x.ForeignKey, nullable: false);
          Field("IsActive", x => x.IsActive, nullable: false);
          Field("MaxAttendees", x => x.MaxAttendees, nullable: false);
          Field("MinimumInitialPayment", x => x.MinimumInitialPayment, nullable: true);
          Field("ModifiedAuditValuesAlreadyUpdated", x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field("Name", x => x.Name, nullable: false);
          Field<Rock.GraphQL.Types.RegistrationTemplate>("RegistrationTemplate", resolve: x => x.Source.RegistrationTemplate);
          Field("RegistrationTemplateId", x => x.RegistrationTemplateId, nullable: false);
          Field<Rock.GraphQL.Types.WorkflowType>("RegistrationWorkflowType", resolve: x => x.Source.RegistrationWorkflowType);
          Field("RegistrationWorkflowTypeId", x => x.RegistrationWorkflowTypeId, nullable: true);
          Field("ReminderSent", x => x.ReminderSent, nullable: false);
          Field("SendReminderDateTime", x => x.SendReminderDateTime, nullable: true);
          Field("StartDateTime", x => x.StartDateTime, nullable: true);
          Field("CreatedDateTime", x => x.CreatedDateTime, nullable: true);
          Field("ModifiedDateTime", x => x.ModifiedDateTime, nullable: true);
          Field("CreatedByPersonAliasId", x => x.CreatedByPersonAliasId, nullable: true);
          Field("ModifiedByPersonAliasId", x => x.ModifiedByPersonAliasId, nullable: true);
          Field("Guid", x => x.Guid.ToStringSafe(), nullable: false);
          Field("ForeignId", x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.RegistrationInstance GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.RegistrationInstanceService(context.db);
           return service.Get(id);
       }
   }
}
