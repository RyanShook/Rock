//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using GraphQL;
using Rock.Model;

namespace Rock.GraphQL.Types
{
    /// <summary>
    /// Person GraphQL Type
    /// </summary>
    public partial class Person : ModelGraphType<Rock.Model.Person>
    {
       public Person(): base("Person")
       {
          Field(x => x.AnniversaryDate, nullable: true);
          Field(x => x.BirthDate, nullable: true);
          Field(x => x.BirthDay, nullable: true);
          Field(x => x.BirthMonth, nullable: true);
          Field(x => x.BirthYear, nullable: true);
          //Field<Rock.GraphQL.Types.DefinedValue>(x => x.ConnectionStatusValue, nullable: false);
          Field(x => x.ConnectionStatusValueId, nullable: true);
          Field(x => x.DaysUntilBirthday, nullable: true);
          Field(x => x.Email, nullable: false);
          Field(x => x.EmailNote, nullable: false);
          Field(x => x.EmailPreference, nullable: false);
          Field(x => x.FirstName, nullable: false);
          Field(x => x.ForeignGuid, nullable: true);
          Field(x => x.ForeignKey, nullable: false);
          Field(x => x.Gender, nullable: false);
          Field(x => x.GivingGroupId, nullable: true);
          Field(x => x.GivingId, nullable: false);
          Field(x => x.GivingLeaderId, nullable: false);
          Field(x => x.GradeOffset, nullable: true);
          Field(x => x.GraduationYear, nullable: true);
          Field(x => x.InactiveReasonNote, nullable: false);
          Field(x => x.IsDeceased, nullable: false);
          Field(x => x.IsEmailActive, nullable: false);
          Field(x => x.IsSystem, nullable: false);
          Field(x => x.LastName, nullable: false);
          //Field<Rock.GraphQL.Types.DefinedValue>(x => x.MaritalStatusValue, nullable: false);
          Field(x => x.MaritalStatusValueId, nullable: true);
          Field(x => x.MiddleName, nullable: false);
          Field(x => x.ModifiedAuditValuesAlreadyUpdated, nullable: false);
          Field(x => x.NickName, nullable: false);
          //Field<Rock.GraphQL.Types.BinaryFile>(x => x.Photo, nullable: false);
          Field(x => x.PhotoId, nullable: true);
          Field(x => x.PrimaryAliasId, nullable: true);
          Field(x => x.RecordStatusLastModifiedDateTime, nullable: true);
          //Field<Rock.GraphQL.Types.DefinedValue>(x => x.RecordStatusReasonValue, nullable: false);
          Field(x => x.RecordStatusReasonValueId, nullable: true);
         //Field<Rock.GraphQL.Types.DefinedValue>(x => x.RecordStatusValue, nullable: false);
          Field(x => x.RecordStatusValueId, nullable: true);
          //Field<Rock.GraphQL.Types.DefinedValue>(x => x.RecordTypeValue, nullable: false);
          Field(x => x.RecordTypeValueId, nullable: true);
          Field(x => x.ReviewReasonNote, nullable: false);
          //Field<Rock.GraphQL.Types.DefinedValue>(x => x.ReviewReasonValue, nullable: false);
          Field(x => x.ReviewReasonValueId, nullable: true);
          //Field<Rock.GraphQL.Types.DefinedValue>(x => x.SuffixValue, nullable: false);
          Field(x => x.SuffixValueId, nullable: true);
          Field(x => x.SystemNote, nullable: false);
         // Field<Rock.GraphQL.Types.DefinedValue>(x => x.TitleValue, nullable: false);
          Field(x => x.TitleValueId, nullable: true);
          Field(x => x.ViewedCount, nullable: true);
          Field(x => x.CreatedDateTime, nullable: true);
          Field(x => x.ModifiedDateTime, nullable: true);
          Field(x => x.CreatedByPersonAliasId, nullable: true);
          Field(x => x.ModifiedByPersonAliasId, nullable: true);
          Field(x => x.Guid, nullable: false);
          Field(x => x.ForeignId, nullable: true);
       }
       public override Rock.Model.Person GetById(int id, GraphQLContext context)
       {
           var service = new Rock.Model.PersonService(context.db);
           return service.Get(id);
       }
   }
}
